import asyncio
import datetime

from aiogram import Bot
from aiogram.exceptions import TelegramBadRequest, TelegramForbiddenError
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from sqlalchemy import func, select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload

from models.database import AsyncSessionLocal
from models.models import (
    ContentTypeEnum,
    Newsletter,
    NewsletterStatusEnum,
    Role,
    TargetAudienceEnum,
    User,
)
from utils.logger import get_logger

logger = get_logger(__name__)
class NewsletterService:
    def __init__(self, bot: Bot):
        self.bot = bot
    async def send_newsletter(
        self, session: AsyncSession, newsletter_id: int
    ) -> dict[str, int]:
        result = await session.execute(
            select(Newsletter)
            .options(
                selectinload(Newsletter.creator),
                selectinload(Newsletter.media_files),
                selectinload(Newsletter.inline_buttons),
            )
            .where(Newsletter.id == newsletter_id)
        )
        newsletter = result.scalar_one_or_none()
        if not newsletter:
            raise ValueError(f"–†–∞—Å—Å—ã–ª–∫–∞ —Å ID {newsletter_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        if newsletter.status != NewsletterStatusEnum.PENDING:
            raise ValueError(f"–†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –°—Ç–∞—Ç—É—Å: {newsletter.status}")
        newsletter.status = NewsletterStatusEnum.SENDING
        await session.commit()
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏ {newsletter_id}")
        target_users = await self._get_target_users(session, newsletter.target_audience)
        if not target_users:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ {newsletter_id}")
            newsletter.status = NewsletterStatusEnum.SENT
            await session.commit()
            return {"total": 0, "success": 0, "failed": 0}
        stats = {"total": len(target_users), "success": 0, "failed": 0, "errors": []}
        for user in target_users:
            try:
                await self._send_message_to_user(user.telegram_id, newsletter)
                stats["success"] += 1
                logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}")
                await asyncio.sleep(0.05)
            except TelegramForbiddenError:
                stats["failed"] += 1
                stats["errors"].append(f"User {user.telegram_id}: bot blocked")
                logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
            except TelegramBadRequest as e:
                stats["failed"] += 1
                stats["errors"].append(f"User {user.telegram_id}: {str(e)}")
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
            except Exception as e:
                stats["failed"] += 1
                stats["errors"].append(
                    f"User {user.telegram_id}: unexpected error - {str(e)}"
                )
                logger.error(
                    f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}"
                )
        newsletter.status = NewsletterStatusEnum.SENT
        await session.commit()
        logger.info(
            f"–†–∞—Å—Å—ã–ª–∫–∞ {newsletter_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. "
            f"–£—Å–ø–µ—à–Ω–æ: {stats['success']}, –û—à–∏–±–æ–∫: {stats['failed']}"
        )
        return stats
    async def _get_target_users(
        self, session: AsyncSession, target_audience: TargetAudienceEnum
    ) -> list[User]:
        if target_audience == TargetAudienceEnum.ALL:
            result = await session.execute(
                select(User).options(selectinload(User.role))
            )
            return result.scalars().all()
        elif target_audience == TargetAudienceEnum.USERS:
            result = await session.execute(
                select(User)
                .join(Role)
                .where(Role.name == "user")
                .options(selectinload(User.role))
            )
            return result.scalars().all()
        elif target_audience == TargetAudienceEnum.MODERATORS:
            result = await session.execute(
                select(User)
                .join(Role)
                .where(Role.name == "moderator")
                .options(selectinload(User.role))
            )
            return result.scalars().all()
        elif target_audience == TargetAudienceEnum.ADMINS:
            result = await session.execute(
                select(User)
                .join(Role)
                .where(Role.name == "admin")
                .options(selectinload(User.role))
            )
            return result.scalars().all()
        return []
    async def process_pending_newsletters(self):
        async with AsyncSessionLocal() as session:
            try:
                now = datetime.datetime.now()
                print("DEBUG: –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")
                print(f"DEBUG: –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {now}")
                print(f"DEBUG: –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞: {now.astimezone().tzinfo}")
                all_scheduled_result = await session.execute(
                    select(Newsletter).where(
                        Newsletter.status == NewsletterStatusEnum.SCHEDULED
                    )
                )
                all_scheduled = all_scheduled_result.scalars().all()
                print(
                    f"DEBUG: –í—Å–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –≤ –±–∞–∑–µ: {len(all_scheduled)}"
                )
                for newsletter in all_scheduled:
                    print(
                        f"DEBUG: –†–∞—Å—Å—ã–ª–∫–∞ ID={newsletter.id}, –≤—Ä–µ–º—è={newsletter.scheduled_at}, —Å—Ç–∞—Ç—É—Å={newsletter.status}"
                    )
                    print(f"DEBUG: –í—Ä–µ–º—è –Ω–∞—Å—Ç—É–ø–∏–ª–æ? {newsletter.scheduled_at <= now}")
                result = await session.execute(
                    select(Newsletter)
                    .options(selectinload(Newsletter.creator))
                    .where(
                        Newsletter.status == NewsletterStatusEnum.SCHEDULED,
                        Newsletter.scheduled_at <= now,
                    )
                )
                pending_newsletters = result.scalars().all()
                print(
                    f"DEBUG: –ù–∞–π–¥–µ–Ω–æ {len(pending_newsletters)} —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"
                )
                for newsletter in pending_newsletters:
                    print(
                        f"DEBUG: –†–∞—Å—Å—ã–ª–∫–∞ ID={newsletter.id}, –≤—Ä–µ–º—è={newsletter.scheduled_at}, —Å—Ç–∞—Ç—É—Å={newsletter.status}"
                    )
                for newsletter in pending_newsletters:
                    try:
                        newsletter.status = NewsletterStatusEnum.PENDING
                        await session.commit()
                        stats = await self.send_newsletter(session, newsletter.id)
                        await self._notify_creator_about_results(newsletter, stats)
                    except Exception as e:
                        logger.error(
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ {newsletter.id}: {e}"
                        )
                        failed_newsletter_result = await session.execute(
                            select(Newsletter)
                            .options(selectinload(Newsletter.creator))
                            .where(Newsletter.id == newsletter.id)
                        )
                        failed_newsletter = (
                            failed_newsletter_result.scalar_one_or_none()
                        )
                        if failed_newsletter:
                            failed_newsletter.status = (
                                NewsletterStatusEnum.SCHEDULED
                            )
                            await session.commit()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ pending —Ä–∞—Å—Å—ã–ª–æ–∫: {e}")
    async def _notify_creator_about_results(
        self, newsletter: Newsletter, stats: dict[str, int]
    ):
        try:
            async with AsyncSessionLocal() as session:
                creator = await session.get(User, newsletter.creator_id)
                if not creator:
                    logger.warning(f"–°–æ–∑–¥–∞—Ç–µ–ª—å —Ä–∞—Å—Å—ã–ª–∫–∏ {newsletter.id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return
                report_text = (
                    f"üìä <b>–û—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ</b>\n\n"
                    f"üìù <b>–¢–µ–∫—Å—Ç:</b> {newsletter.text[:50]}{'...' if len(newsletter.text) > 50 else ''}\n"
                    f"üë• <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {newsletter.target_audience.value}\n"
                    f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                    f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total']}\n"
                    f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {stats['success']}\n"
                    f"‚Ä¢ –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {stats['failed']}\n"
                    f"‚è∞ <b>–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:</b> {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}"
                )
                await self.bot.send_message(
                    chat_id=creator.telegram_id, text=report_text, parse_mode="HTML"
                )
                logger.info(f"–û—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ {newsletter.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–æ–∑–¥–∞—Ç–µ–ª—é")
        except Exception as e:
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ —Å–æ–∑–¥–∞—Ç–µ–ª—é —Ä–∞—Å—Å—ã–ª–∫–∏ {newsletter.id}: {e}"
            )
    async def _send_message_to_user(self, chat_id: int, newsletter: Newsletter):
        reply_markup = self._create_inline_keyboard(newsletter)
        content_type = getattr(newsletter, "content_type", ContentTypeEnum.TEXT)
        if content_type == ContentTypeEnum.TEXT:
            await self.bot.send_message(
                chat_id=chat_id,
                text=newsletter.text,
                parse_mode="HTML",
                reply_markup=reply_markup,
            )
        elif content_type == ContentTypeEnum.PHOTO:
            media_file = self._get_media_file(newsletter, "photo")
            if media_file:
                await self.bot.send_photo(
                    chat_id=chat_id,
                    photo=media_file.file_id,
                    caption=newsletter.text,
                    parse_mode="HTML",
                    reply_markup=reply_markup,
                )
            else:
                await self.bot.send_message(
                    chat_id=chat_id,
                    text=f"üñºÔ∏è [–§–æ—Ç–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ]\n\n{newsletter.text}",
                    parse_mode="HTML",
                    reply_markup=reply_markup,
                )
        elif content_type == ContentTypeEnum.VIDEO:
            media_file = self._get_media_file(newsletter, "video")
            if media_file:
                await self.bot.send_video(
                    chat_id=chat_id,
                    video=media_file.file_id,
                    caption=newsletter.text,
                    parse_mode="HTML",
                    reply_markup=reply_markup,
                )
            else:
                await self.bot.send_message(
                    chat_id=chat_id,
                    text=f"üé¨ [–í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ]\n\n{newsletter.text}",
                    parse_mode="HTML",
                    reply_markup=reply_markup,
                )
        elif content_type == ContentTypeEnum.ANIMATION:
            media_file = self._get_media_file(newsletter, "animation")
            if media_file:
                await self.bot.send_animation(
                    chat_id=chat_id,
                    animation=media_file.file_id,
                    caption=newsletter.text,
                    parse_mode="HTML",
                    reply_markup=reply_markup,
                )
            else:
                await self.bot.send_message(
                    chat_id=chat_id,
                    text=f"üé≠ [GIF –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω]\n\n{newsletter.text}",
                    parse_mode="HTML",
                    reply_markup=reply_markup,
                )
        elif content_type == ContentTypeEnum.DOCUMENT:
            media_file = self._get_media_file(newsletter, "document")
            if media_file:
                await self.bot.send_document(
                    chat_id=chat_id,
                    document=media_file.file_id,
                    caption=newsletter.text,
                    parse_mode="HTML",
                    reply_markup=reply_markup,
                )
            else:
                await self.bot.send_message(
                    chat_id=chat_id,
                    text=f"üìé [–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω]\n\n{newsletter.text}",
                    parse_mode="HTML",
                    reply_markup=reply_markup,
                )
        else:
            await self.bot.send_message(
                chat_id=chat_id,
                text=newsletter.text,
                parse_mode="HTML",
                reply_markup=reply_markup,
            )
    def _create_inline_keyboard(
        self, newsletter: Newsletter
    ) -> InlineKeyboardMarkup | None:
        if not newsletter.inline_buttons:
            return None
        buttons = sorted(
            newsletter.inline_buttons, key=lambda b: (b.row_position, b.column_position)
        )
        if not buttons:
            return None
        rows = {}
        for button in buttons:
            row = button.row_position
            if row not in rows:
                rows[row] = []
            rows[row].append(button)
        keyboard_buttons = []
        for row_num in sorted(rows.keys()):
            row_buttons = []
            for button in rows[row_num]:
                if button.url:
                    row_buttons.append(
                        InlineKeyboardButton(text=button.text, url=button.url)
                    )
            if row_buttons:
                keyboard_buttons.append(row_buttons)
        if keyboard_buttons:
            return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        return None
async def get_newsletter_stats(session: AsyncSession) -> dict:
    total_result = await session.execute(select(func.count(Newsletter.id)))
    total_newsletters = total_result.scalar()
    stats_by_status = {}
    for status in NewsletterStatusEnum:
        result = await session.execute(
            select(func.count(Newsletter.id)).where(Newsletter.status == status)
        )
        stats_by_status[status.value] = result.scalar()
    return {"total": total_newsletters, "by_status": stats_by_status}
