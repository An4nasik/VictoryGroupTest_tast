import datetime

from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from sqlalchemy.ext.asyncio import AsyncSession

from keyboards.inline import (
    get_audience_selection_keyboard,
    get_buttons_management_keyboard,
    get_content_type_keyboard,
    get_media_actions_keyboard,
    get_schedule_keyboard,
)
from middlewares.auth import IsModerator
from models.models import (
    ButtonTypeEnum,
    ContentTypeEnum,
    Newsletter,
    NewsletterButton,
    NewsletterMedia,
    NewsletterStatusEnum,
    TargetAudienceEnum,
)
from services.newsletter_service import NewsletterService
from services.user_service import get_user_by_telegram_id
from states.moderator import CreateNewsletter

router = Router()
router.message.filter(IsModerator())
router.callback_query.filter(IsModerator())
@router.message(Command("create_newsletter"))
async def start_newsletter(message: Message, state: FSMContext):
    await state.set_state(CreateNewsletter.waiting_for_text)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram (–∂–∏—Ä–Ω—ã–π, –∫—É—Ä—Å–∏–≤ –∏ —Ç.–¥.)."
    )
@router.message(CreateNewsletter.waiting_for_text, F.text)
async def newsletter_text_received(message: Message, state: FSMContext):
    await state.update_data(text=message.html_text)
    await state.set_state(CreateNewsletter.waiting_for_content_type)
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=get_content_type_keyboard(),
    )
@router.callback_query(
    CreateNewsletter.waiting_for_content_type, F.data.startswith("content_type_")
)
async def content_type_selected(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    content_type = callback.data.split("_")[2]
    await state.update_data(content_type=content_type)
    if content_type == "text":
        await state.set_state(CreateNewsletter.waiting_for_audience)
        await callback.message.edit_text(
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É:",
            reply_markup=get_audience_selection_keyboard(),
        )
    else:
        await state.set_state(CreateNewsletter.waiting_for_media)
        media_instructions = {
            "photo": "üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
            "video": "üé¨ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
            "animation": "üé≠ –û—Ç–ø—Ä–∞–≤—å—Ç–µ GIF-–∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
            "document": "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
        }
        instruction = media_instructions.get(content_type, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª")
        await callback.message.edit_text(instruction)
@router.message(CreateNewsletter.waiting_for_media, F.photo)
async def photo_received(message: Message, state: FSMContext):
    data = await state.get_data()
    if data.get("content_type") != "photo":
        await message.answer("‚ùå –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.")
        return
    photo = message.photo[-1]
    await state.update_data(
        media_file_id=photo.file_id,
        media_file_unique_id=photo.file_unique_id,
        media_file_type="photo",
        media_file_size=photo.file_size,
    )
    await state.set_state(CreateNewsletter.waiting_for_audience)
    await message.answer(
        "‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é:",
        reply_markup=get_audience_selection_keyboard(),
    )
@router.message(CreateNewsletter.waiting_for_media, F.video)
async def video_received(message: Message, state: FSMContext):
    data = await state.get_data()
    if data.get("content_type") != "video":
        await message.answer("‚ùå –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–∏–¥–µ–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª.")
        return
    video = message.video
    await state.update_data(
        media_file_id=video.file_id,
        media_file_unique_id=video.file_unique_id,
        media_file_type="video",
        media_file_size=video.file_size,
        media_mime_type=video.mime_type,
        media_file_name=video.file_name,
    )
    await state.set_state(CreateNewsletter.waiting_for_audience)
    await message.answer(
        "‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é:",
        reply_markup=get_audience_selection_keyboard(),
    )
@router.message(CreateNewsletter.waiting_for_media, F.animation)
async def animation_received(message: Message, state: FSMContext):
    data = await state.get_data()
    if data.get("content_type") != "animation":
        await message.answer("‚ùå –û–∂–∏–¥–∞–µ—Ç—Å—è GIF-–∞–Ω–∏–º–∞—Ü–∏—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ GIF.")
        return
    animation = message.animation
    await state.update_data(
        media_file_id=animation.file_id,
        media_file_unique_id=animation.file_unique_id,
        media_file_type="animation",
        media_file_size=animation.file_size,
        media_mime_type=animation.mime_type,
        media_file_name=animation.file_name,
    )
    await state.set_state(CreateNewsletter.waiting_for_audience)
    await message.answer(
        "‚úÖ GIF –∑–∞–≥—Ä—É–∂–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é:",
        reply_markup=get_audience_selection_keyboard(),
    )
@router.message(CreateNewsletter.waiting_for_media, F.document)
async def document_received(message: Message, state: FSMContext):
    data = await state.get_data()
    if data.get("content_type") != "document":
        await message.answer("‚ùå –û–∂–∏–¥–∞–µ—Ç—Å—è –¥–æ–∫—É–º–µ–Ω—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª.")
        return
    document = message.document
    await state.update_data(
        media_file_id=document.file_id,
        media_file_unique_id=document.file_unique_id,
        media_file_type="document",
        media_file_size=document.file_size,
        media_mime_type=document.mime_type,
        media_file_name=document.file_name,
    )
    await state.set_state(CreateNewsletter.waiting_for_audience)
    await message.answer(
        "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é:",
        reply_markup=get_audience_selection_keyboard(),
    )
@router.message(CreateNewsletter.waiting_for_media)
async def wrong_media_type(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞"""
    data = await state.get_data()
    content_type = data.get("content_type")
    error_messages = {
        "photo": "‚ùå –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.",
        "video": "‚ùå –û–∂–∏–¥–∞–µ—Ç—Å—è –≤–∏–¥–µ–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª.",
        "animation": "‚ùå –û–∂–∏–¥–∞–µ—Ç—Å—è GIF-–∞–Ω–∏–º–∞—Ü–∏—è. –û—Ç–ø—Ä–∞–≤—å—Ç–µ GIF.",
        "document": "‚ùå –û–∂–∏–¥–∞–µ—Ç—Å—è –¥–æ–∫—É–º–µ–Ω—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª.",
    }
    error_msg = error_messages.get(
        content_type, "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞."
    )
    await message.answer(error_msg)
@router.callback_query(
    CreateNewsletter.waiting_for_audience, F.data.startswith("audience_")
)
async def audience_selected(callback: types.CallbackQuery, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∞—É–¥–∏—Ç–æ—Ä–∏—é –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å inline –∫–Ω–æ–ø–∫–∏.
    """
    await callback.answer()
    audience = callback.data.split("_")[1]
    await state.update_data(audience=audience)
    await state.set_state(CreateNewsletter.waiting_for_inline_buttons)
    await callback.message.edit_text(
        "–ê—É–¥–∏—Ç–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞! –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ?",
        reply_markup=get_media_actions_keyboard(),
    )
@router.callback_query(
    CreateNewsletter.waiting_for_inline_buttons,
    F.data.in_(["add_buttons", "skip_buttons"]),
)
async def buttons_action_selected(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä: –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
    """
    await callback.answer()
    if callback.data == "add_buttons":
        await state.update_data(buttons=[])
        await state.set_state(CreateNewsletter.waiting_for_inline_buttons)
        await callback.message.edit_text(
            "–û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏ URL —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n\n"
            "üìù <b>–§–æ—Ä–º–∞—Ç:</b> <code>–¢–µ–∫—Å—Ç_–∫–Ω–æ–ø–∫–∏ https://example.com</code>\n"
            "üåê <b>–ü—Ä–∏–º–µ—Ä:</b> <code>–ù–∞—à_—Å–∞–π—Ç https://google.com</code>",
            parse_mode="HTML",
        )
    else:
        await state.set_state(CreateNewsletter.waiting_for_schedule)
        await callback.message.edit_text(
            "–ö–Ω–æ–ø–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É:",
            reply_markup=get_schedule_keyboard(),
        )
@router.message(CreateNewsletter.waiting_for_inline_buttons, F.text)
async def button_received(message: Message, state: FSMContext):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏
    """
    try:
        parts = message.text.strip().split()
        if len(parts) < 2:
            raise ValueError("–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        button_text = parts[0].replace("_", " ")
        button_url = " ".join(parts[1:])
        if not (button_url.startswith("http://") or button_url.startswith("https://")):
            await message.answer("‚ùå URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
            return
    except (ValueError, IndexError):
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n\n"
            "üìù <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:</b> <code>–¢–µ–∫—Å—Ç_–∫–Ω–æ–ø–∫–∏ https://example.com</code>\n"
            "üåê <b>–ü—Ä–∏–º–µ—Ä:</b> <code>–ù–∞—à_—Å–∞–π—Ç https://google.com</code>",
            parse_mode="HTML",
        )
        return
    data = await state.get_data()
    buttons = data.get("buttons", [])
    button = {
        "text": button_text,
        "url": button_url,
        "type": "URL",
    }
    buttons.append(button)
    await state.update_data(buttons=buttons)
    await message.answer(
        f"‚úÖ –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: <b>{button_text}</b>\n"
        f"üîó –°—Å—ã–ª–∫–∞: {button_url}\n\n"
        f"üìä –í—Å–µ–≥–æ –∫–Ω–æ–ø–æ–∫: {len(buttons)}",
        reply_markup=get_buttons_management_keyboard(),
        parse_mode="HTML",
    )
@router.callback_query(
    CreateNewsletter.waiting_for_inline_buttons,
    F.data.in_(["add_new_button", "finish_buttons", "remove_last_button"]),
)
async def manage_buttons_action(callback: types.CallbackQuery, state: FSMContext):
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏: –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ, —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å
    """
    await callback.answer()
    data = await state.get_data()
    buttons = data.get("buttons", [])
    if callback.data == "add_new_button":
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏ URL —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n\n"
            "üìù <b>–§–æ—Ä–º–∞—Ç:</b> <code>–¢–µ–∫—Å—Ç_–∫–Ω–æ–ø–∫–∏ https://example.com</code>\n"
            "üåê <b>–ü—Ä–∏–º–µ—Ä:</b> <code>–ù–∞—à_—Å–∞–π—Ç https://google.com</code>",
            parse_mode="HTML",
        )
    elif callback.data == "remove_last_button":
        if buttons:
            removed_button = buttons.pop()
            await state.update_data(buttons=buttons)
            await callback.message.edit_text(
                f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: <b>{removed_button['text']}</b>\n"
                f"üìä –û—Å—Ç–∞–ª–æ—Å—å –∫–Ω–æ–ø–æ–∫: {len(buttons)}",
                reply_markup=get_buttons_management_keyboard(),
                parse_mode="HTML",
            )
        else:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                reply_markup=get_buttons_management_keyboard(),
            )
    elif callback.data == "finish_buttons":
        if buttons:
            button_list = "\n".join(
                [f"‚Ä¢ {btn['text']} ‚Üí {btn['url']}" for btn in buttons]
            )
            await state.set_state(CreateNewsletter.waiting_for_schedule)
            await callback.message.edit_text(
                f"‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –∫–Ω–æ–ø–æ–∫: {len(buttons)}\n\n"
                f"üìã <b>–°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫:</b>\n{button_list}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É:",
                reply_markup=get_schedule_keyboard(),
                parse_mode="HTML",
            )
        else:
            await callback.message.edit_text(
                "‚ùå –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —à–∞–≥.",
                reply_markup=get_buttons_management_keyboard(),
            )
    else:
        await callback.message.edit_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏.")
        await state.clear()
@router.callback_query(
    CreateNewsletter.waiting_for_schedule, F.data.startswith("schedule_")
)
async def schedule_selected(
    callback: types.CallbackQuery, state: FSMContext, session: AsyncSession
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏.
    """
    await callback.answer()
    schedule_type = callback.data.split("_")[1]
    data = await state.get_data()
    user = await get_user_by_telegram_id(session, callback.from_user.id)
    if not user:
        await callback.message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–∞—Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å.")
        await state.clear()
        return
    audience_str = data.get("audience")
    print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏: '{audience_str}'")
    try:
        if audience_str == "all":
            audience_enum_member = TargetAudienceEnum.ALL
        elif audience_str == "users":
            audience_enum_member = TargetAudienceEnum.USERS
        elif audience_str == "moderators":
            audience_enum_member = TargetAudienceEnum.MODERATORS
        elif audience_str == "admins":
            audience_enum_member = TargetAudienceEnum.ADMINS
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏: {audience_str}")
        print(f"DEBUG: –°–æ–∑–¥–∞–Ω enum –æ–±—ä–µ–∫—Ç: {audience_enum_member}")
    except ValueError as e:
        print(f"DEBUG: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è enum: {e}")
        await callback.message.edit_text(
            f"–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è '{audience_str}'."
        )
        await state.clear()
        return
    if schedule_type == "now":
        content_type_str = data.get("content_type", "text")
        try:
            if content_type_str == "text":
                content_type_enum = ContentTypeEnum.TEXT
            elif content_type_str == "photo":
                content_type_enum = ContentTypeEnum.PHOTO
            elif content_type_str == "video":
                content_type_enum = ContentTypeEnum.VIDEO
            elif content_type_str == "animation":
                content_type_enum = ContentTypeEnum.ANIMATION
            elif content_type_str == "document":
                content_type_enum = ContentTypeEnum.DOCUMENT
            else:
                content_type_enum = ContentTypeEnum.TEXT
        except Exception as e:
            print(f"DEBUG: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è content_type enum: {e}")
            content_type_enum = ContentTypeEnum.TEXT
        newsletter = Newsletter(
            creator_id=user.id,
            text=data.get("text"),
            target_audience=audience_enum_member,
            content_type=content_type_enum,
            status=NewsletterStatusEnum.PENDING,
            scheduled_at=datetime.datetime.now(),
        )
        session.add(newsletter)
        try:
            await session.commit()
            print(f"DEBUG: –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å ID: {newsletter.id}")
            if content_type_str != "text" and data.get("media_file_id"):
                media = NewsletterMedia(
                    newsletter_id=newsletter.id,
                    file_id=data.get("media_file_id"),
                    file_unique_id=data.get("media_file_unique_id"),
                    file_type=data.get("media_file_type"),
                    file_size=data.get("media_file_size"),
                    mime_type=data.get("media_mime_type"),
                    file_name=data.get("media_file_name"),
                )
                session.add(media)
                await session.commit()
                print(f"DEBUG: –ú–µ–¥–∏–∞—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ {newsletter.id}")
            buttons = data.get("buttons", [])
            if buttons:
                for i, button in enumerate(buttons):
                    db_button = NewsletterButton(
                        newsletter_id=newsletter.id,
                        text=button["text"],
                        button_type=ButtonTypeEnum.URL,
                        url=button["url"],
                        row_position=0,
                        column_position=i,
                    )
                    session.add(db_button)
                await session.commit()
                print(
                    f"DEBUG: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(buttons)} –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ {newsletter.id}"
                )
        except Exception as e:
            print(f"DEBUG: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞: {e}")
            await callback.message.edit_text(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}"
            )
            await state.clear()
            return
        await state.clear()
        newsletter_service = NewsletterService(callback.bot)
        await callback.message.edit_text(
            "üì§ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏...\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
        )
        try:
            stats = await newsletter_service.send_newsletter(session, newsletter.id)
            await callback.message.edit_text(
                f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                f"üìù <b>–¢–µ–∫—Å—Ç:</b> {data.get('text')[:50]}{'...' if len(data.get('text')) > 50 else ''}\n"
                f"üë• <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {audience_str}\n\n"
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total']}\n"
                f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ‚úÖ {stats['success']}\n"
                f"‚Ä¢ –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ‚ùå {stats['failed']}\n\n"
                f"‚è∞ <b>–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:</b> {datetime.datetime.now().strftime('%d.%m.%Y %H:%M')}",
                parse_mode="HTML",
            )
        except Exception as e:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}"
            )
    else:
        await state.set_state(CreateNewsletter.waiting_for_schedule_datetime)
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú`"
        )
@router.message(CreateNewsletter.waiting_for_schedule_datetime, F.text)
async def schedule_datetime_received(
    message: Message, state: FSMContext, session: AsyncSession
):
    try:
        scheduled_dt = datetime.datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        now = datetime.datetime.now()
        if scheduled_dt <= now:
            await message.answer(
                f"‚ö†Ô∏è –£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ!\n"
                f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now.strftime('%d.%m.%Y %H:%M')}\n"
                f"–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º."
            )
            return
        print(f"DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª: {message.text}")
        print(f"DEBUG: –°–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∫–∞–∫ naive datetime: {scheduled_dt}")
        print(f"DEBUG: –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now}")
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú`\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `24.07.2025 22:12`"
        )
        return
    data = await state.get_data()
    user = await get_user_by_telegram_id(session, message.from_user.id)
    if not user:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–∞—Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å.")
        await state.clear()
        return
    audience_str = data.get("audience")
    print(
        f"DEBUG: –ü–æ–ª—É—á–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: '{audience_str}'"
    )
    try:
        if audience_str == "all":
            audience_enum_member = TargetAudienceEnum.ALL
        elif audience_str == "users":
            audience_enum_member = TargetAudienceEnum.USERS
        elif audience_str == "moderators":
            audience_enum_member = TargetAudienceEnum.MODERATORS
        elif audience_str == "admins":
            audience_enum_member = TargetAudienceEnum.ADMINS
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏: {audience_str}")
        print(
            f"DEBUG: –°–æ–∑–¥–∞–Ω enum –æ–±—ä–µ–∫—Ç –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {audience_enum_member}"
        )
    except ValueError as e:
        print(f"DEBUG: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è enum –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è '{audience_str}'.")
        await state.clear()
        return
    content_type_str = data.get("content_type", "text")
    try:
        if content_type_str == "text":
            content_type_enum = ContentTypeEnum.TEXT
        elif content_type_str == "photo":
            content_type_enum = ContentTypeEnum.PHOTO
        elif content_type_str == "video":
            content_type_enum = ContentTypeEnum.VIDEO
        elif content_type_str == "animation":
            content_type_enum = ContentTypeEnum.ANIMATION
        elif content_type_str == "document":
            content_type_enum = ContentTypeEnum.DOCUMENT
        else:
            content_type_enum = ContentTypeEnum.TEXT
    except Exception as e:
        print(
            f"DEBUG: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è content_type enum –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {e}"
        )
        content_type_enum = ContentTypeEnum.TEXT
    newsletter = Newsletter(
        creator_id=user.id,
        text=data.get("text"),
        target_audience=audience_enum_member,
        content_type=content_type_enum,
        status=NewsletterStatusEnum.SCHEDULED,
        scheduled_at=scheduled_dt,
    )
    session.add(newsletter)
    try:
        await session.commit()
        print(
            f"DEBUG: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å ID: {newsletter.id}"
        )
        if content_type_str != "text" and data.get("media_file_id"):
            media = NewsletterMedia(
                newsletter_id=newsletter.id,
                file_id=data.get("media_file_id"),
                file_unique_id=data.get("media_file_unique_id"),
                file_type=data.get("media_file_type"),
                file_size=data.get("media_file_size"),
                mime_type=data.get("media_mime_type"),
                file_name=data.get("media_file_name"),
            )
            session.add(media)
            await session.commit()
            print(
                f"DEBUG: –ú–µ–¥–∏–∞—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ {newsletter.id}"
            )
        buttons = data.get("buttons", [])
        if buttons:
            for i, button in enumerate(buttons):
                db_button = NewsletterButton(
                    newsletter_id=newsletter.id,
                    text=button["text"],
                    button_type=ButtonTypeEnum.URL,
                    url=button["url"],
                    row_position=0,
                    column_position=i,
                )
                session.add(db_button)
            await session.commit()
            print(
                f"DEBUG: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(buttons)} –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ {newsletter.id}"
            )
    except Exception as e:
        print(f"DEBUG: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞: {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}")
        await state.clear()
        return
    await state.clear()
    content_type_emoji = {
        "text": "üìù",
        "photo": "üñºÔ∏è",
        "video": "üé¨",
        "animation": "üé≠",
        "document": "üìé",
    }
    emoji = content_type_emoji.get(content_type_str, "üìù")
    await message.answer(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {scheduled_dt.strftime('%d.%m.%Y %H:%M')}.\n\n"
        f"{emoji} <b>–¢–∏–ø:</b> {content_type_str}\n"
        f"üìù <b>–¢–µ–∫—Å—Ç:</b> {data.get('text')}\n"
        f"üë• <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {audience_str}",
        parse_mode="HTML",
    )
