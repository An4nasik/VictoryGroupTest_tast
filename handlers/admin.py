from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from sqlalchemy import desc, func, select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload

from keyboards.inline import get_role_selection_keyboard
from middlewares.auth import IsAdmin
from models.models import Newsletter, NewsletterStatusEnum, User
from services.newsletter_service import get_newsletter_stats
from services.user_service import get_role_by_name
from states.admin import SetRoleState
from utils.logger import get_logger

router = Router()
logger = get_logger(__name__)

router.message.filter(IsAdmin())
router.callback_query.filter(IsAdmin())


@router.message(Command("stats"))
async def get_stats(message: Message, session: AsyncSession):
    query = select(func.count(User.id))
    result = await session.execute(query)
    user_count = result.scalar_one()
    await message.answer(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {user_count}")


@router.message(Command("setrole"))
async def start_set_role(message: Message, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —Å–º–µ–Ω—É —Ä–æ–ª–∏.")
    await state.set_state(SetRoleState.waiting_for_user_id)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å:"
    )


@router.message(SetRoleState.waiting_for_user_id, F.text)
async def user_id_received(message: Message, session: AsyncSession, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    target_user_id = int(message.text)
    logger.info(
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –≤–≤–µ–ª ID: {target_user_id} –¥–ª—è —Å–º–µ–Ω—ã —Ä–æ–ª–∏."
    )
    query = select(User).filter(User.telegram_id == target_user_id)
    result = await session.execute(query)
    user_to_update = result.scalar_one_or_none()
    if not user_to_update:
        await message.answer(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π ID –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é."
        )
        return
    await state.update_data(target_user_id=target_user_id)
    await state.set_state(SetRoleState.waiting_for_role_selection)
    await message.answer(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_to_update.email} (ID: {target_user_id}) –Ω–∞–π–¥–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å:",
        reply_markup=get_role_selection_keyboard(),
    )


@router.callback_query(
    SetRoleState.waiting_for_role_selection, F.data.startswith("role_")
)
async def role_for_user_selected(
    callback: CallbackQuery, session: AsyncSession, state: FSMContext
):
    user_data = await state.get_data()
    target_user_id = user_data.get("target_user_id")
    new_role_name = callback.data.split("_")[1]
    admin_id = callback.from_user.id
    logger.info(
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id} –≤—ã–±—Ä–∞–ª —Ä–æ–ª—å '{new_role_name}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}."
    )
    user_query = select(User).filter(User.telegram_id == target_user_id)
    user_result = await session.execute(user_query)
    user_to_update = user_result.scalar_one()
    new_role = await get_role_by_name(session, new_role_name)
    if not new_role:
        logger.error(
            f"–†–æ–ª—å '{new_role_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_id}."
        )
        await callback.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—É—é —Ä–æ–ª—å."
        )
        await state.clear()
        return
    user_to_update.role_id = new_role.id
    session.add(user_to_update)
    await session.commit()
    logger.info(
        f"–†–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ '{new_role_name}'."
    )
    await state.clear()
    await callback.message.edit_text(
        f"–†–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_role_name}."
    )
    await callback.answer()


@router.message(Command("newsletters"))
async def view_newsletters(message: Message, session: AsyncSession):
    stats = await get_newsletter_stats(session)
    result = await session.execute(
        select(Newsletter)
        .options(selectinload(Newsletter.creator))
        .order_by(desc(Newsletter.created_at))
        .limit(10)
    )
    recent_newsletters = result.scalars().all()
    text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫:</b>\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ —Ä–∞—Å—Å—ã–ª–æ–∫: {stats['total']}\n"
    text += "‚Ä¢ –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:\n"
    for status, count in stats["by_status"].items():
        status_emoji = {
            "draft": "üìù",
            "pending": "‚è≥",
            "scheduled": "‚è∞",
            "sending": "üì§",
            "sent": "‚úÖ",
        }.get(status, "‚ùì")
        text += f"  {status_emoji} {status}: {count}\n"
    text += "\nüìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ä–∞—Å—Å—ã–ª–æ–∫:</b>\n\n"
    if not recent_newsletters:
        text += "–†–∞—Å—Å—ã–ª–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç."
    else:
        for i, newsletter in enumerate(recent_newsletters, 1):
            creator_name = (
                newsletter.creator.email if newsletter.creator else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            )
            text += f"{i}. <b>ID:</b> {newsletter.id}\n"
            text += f"   üìù <b>–¢–µ–∫—Å—Ç:</b> {newsletter.text[:30]}{'...' if len(newsletter.text) > 30 else ''}\n"
            text += f"   üë§ <b>–°–æ–∑–¥–∞—Ç–µ–ª—å:</b> {creator_name}\n"
            text += f"   üë• <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {newsletter.target_audience.value}\n"
            text += f"   üìÖ <b>–°–æ–∑–¥–∞–Ω–æ:</b> {newsletter.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            text += f"   ‚è∞ <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ:</b> {newsletter.scheduled_at.strftime('%d.%m.%Y %H:%M') if newsletter.scheduled_at else '–ù–µ –∑–∞–¥–∞–Ω–æ'}\n"
            text += f"   üìä <b>–°—Ç–∞—Ç—É—Å:</b> {newsletter.status.value}\n\n"
    await message.answer(text, parse_mode="HTML")


@router.message(Command("newsletter"))
async def view_specific_newsletter(message: Message, session: AsyncSession):
    command_parts = message.text.split()
    if len(command_parts) != 2 or not command_parts[1].isdigit():
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/newsletter &lt;ID&gt;</code>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>/newsletter 1</code>\n\n"
            "–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—ã–ª–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newsletters",
            parse_mode="HTML",
        )
        return
    newsletter_id = int(command_parts[1])
    result = await session.execute(
        select(Newsletter)
        .options(selectinload(Newsletter.creator))
        .where(Newsletter.id == newsletter_id)
    )
    newsletter = result.scalar_one_or_none()
    if not newsletter:
        await message.answer(f"‚ùå –†–∞—Å—Å—ã–ª–∫–∞ —Å ID {newsletter_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    creator_name = newsletter.creator.email if newsletter.creator else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    text = "üìÑ <b>–†–∞—Å—Å—ã–ª–∫–∞"
    text += f"üìù <b>–¢–µ–∫—Å—Ç:</b>\n{newsletter.text}\n\n"
    text += f"üë§ <b>–°–æ–∑–¥–∞—Ç–µ–ª—å:</b> {creator_name}\n"
    text += f"üë• <b>–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:</b> {newsletter.target_audience.value}\n"
    text += (
        f"üìÖ <b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {newsletter.created_at.strftime('%d.%m.%Y %H:%M')}\n"
    )
    if newsletter.scheduled_at:
        text += f"‚è∞ <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞:</b> {newsletter.scheduled_at.strftime('%d.%m.%Y %H:%M')}\n"
    status_info = {
        NewsletterStatusEnum.DRAFT: ("üìù", "–ß–µ—Ä–Ω–æ–≤–∏–∫"),
        NewsletterStatusEnum.PENDING: ("‚è≥", "–û–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏"),
        NewsletterStatusEnum.SCHEDULED: ("‚è∞", "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞"),
        NewsletterStatusEnum.SENDING: ("üì§", "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è"),
        NewsletterStatusEnum.SENT: ("‚úÖ", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞"),
    }
    emoji, status_text = status_info.get(
        newsletter.status, ("‚ùì", newsletter.status.value)
    )
    text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {emoji} {status_text}\n"
    await message.answer(text, parse_mode="HTML")
